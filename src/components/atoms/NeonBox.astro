---
interface Props {
  class?: string;
  noBorderLeft?: boolean;
  noBorderRight?: boolean;
  noBorderTop?: boolean;
  noBorderBottom?: boolean;
  boxClass?: string;
  contentClass?: string;
  transitionName?: string;
  color?: "pink" | "yellow" | "cyan" | "purple";
}

const {
  class: className = "",
  noBorderLeft = false,
  noBorderRight = false,
  noBorderTop = false,
  noBorderBottom = false,
  contentClass = "",
  transitionName = "",
  color,
} = Astro.props;

// Función para obtener el valor CSS del color neon
const getNeonColor = (color: "pink" | "yellow" | "cyan" | "purple") => {
  const colorMap = {
    pink: "#ff00a0",
    yellow: "#f8f32b",
    cyan: "#00fff7",
    purple: "#a020f0",
  };
  return colorMap[color];
};

const suppressClasses = [];
if (noBorderLeft) suppressClasses.push("no-border-left");
if (noBorderRight) suppressClasses.push("no-border-right");
if (noBorderTop) suppressClasses.push("no-border-top");
if (noBorderBottom) suppressClasses.push("no-border-bottom");
const borderClass = `${suppressClasses.join(" ")}`;
---

<div class={`neon-wrapper ${className} ${className}`}>
  <div
    class={`neon-box ${borderClass} ${className} ${color ? "static-color" : ""}`}
    style={`${color ? `--neon-color: ${getNeonColor(color)};` : ""} ${transitionName ? `view-transition-name: ${transitionName}` : ""}`}
  >
  </div>
  <div class={`neon-content ${borderClass} ${contentClass}`}>
    <slot />
  </div>
</div>

<style>
  .neon-wrapper {
    position: relative;
    display: inline-block;
    background-color: #000000;
  }

  .neon-box {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 0;

    /* Todos los bordes activos por defecto */
    border: 1px solid transparent;

    /* Borde neon animado (por defecto) */
    background-image: linear-gradient(#000000, #000000),
      linear-gradient(135deg, #ff00a0, #00fff7, #a020f0, #f8f32b);
    background-origin: border-box;
    background-clip: padding-box, border-box;

    /* Animación del gradiente */
    animation: neon-move 6s linear infinite;
    background-size: 300% 300%;
  }

  /* Estilo para color estático */
  .neon-box.static-color {
    background-image: linear-gradient(#000000, #000000),
      linear-gradient(135deg, var(--neon-color), var(--neon-color));
    animation: none;
    background-size: auto;
  }

  /* Suprimir bordes específicos */
  .neon-box.no-border-left,
  .neon-content.no-border-left {
    border-left: none;
  }

  .neon-box.no-border-right,
  .neon-content.no-border-right {
    border-right: none;
  }

  .neon-box.no-border-top,
  .neon-content.no-border-top {
    border-top: none;
  }

  .neon-box.no-border-bottom,
  .neon-content.no-border-bottom {
    border-bottom: none;
  }

  .neon-content {
    position: relative;
    border: 1px solid transparent;
  }

  @keyframes neon-move {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }
</style>
