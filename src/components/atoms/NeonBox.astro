---
interface Props {
  class?: string;
  contentClass?: string;
  borderClass?: {
    mobile?: [number, number, number, number]; // [top, right, bottom, left]
    desktop?: [number, number, number, number]; // [top, right, bottom, left]
  };
  transitionName?: string;
  color?: "pink" | "yellow" | "cyan" | "purple";
}

const {
  class: className = "",
  contentClass = "",
  borderClass,
  transitionName = "",
  color,
} = Astro.props;

const getBorderWidth = (borders: [number, number, number, number]) => {
  return `${borders.join("px ")}px`;
};

const getNeonColor = (color: "pink" | "yellow" | "cyan" | "purple") => {
  const colorMap = {
    pink: "#ff00a0",
    yellow: "#f8f32b",
    cyan: "#00fff7",
    purple: "#a020f0",
  };
  return colorMap[color];
};

const mobileBorderWidth = borderClass?.mobile
  ? getBorderWidth(borderClass.mobile)
  : "1px";
const desktopBorderWidth = borderClass?.desktop
  ? getBorderWidth(borderClass.desktop)
  : "1px";
---

<div class={`neon-wrapper ${className}`}>
  <div
    class={`neon-box ${className} ${color ? "static-color" : ""}`}
    style={`${color ? `--neon-color: ${getNeonColor(color)};` : ""} ${transitionName ? `view-transition-name: ${transitionName}` : ""} --mobile-border: ${mobileBorderWidth}; --desktop-border: ${desktopBorderWidth}; border-width: var(--mobile-border);`}
  >
  </div>
  <div
    class={`neon-content h-full ${contentClass}`}
    style={`--mobile-border: ${mobileBorderWidth}; --desktop-border: ${desktopBorderWidth}; border-width: var(--mobile-border);`}
  >
    <slot />
  </div>
</div>

<style>
  .neon-wrapper {
    position: relative;
    display: inline-block;
    background-color: #000000;
  }

  .neon-box {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 0;

    /* Propiedades comunes de borde */
    border-style: solid;
    border-color: transparent;

    /* Borde neon animado (por defecto) */
    background-image: linear-gradient(#000000, #000000),
      linear-gradient(135deg, #ff00a0, #00fff7, #a020f0, #f8f32b);
    background-origin: border-box;
    background-clip: padding-box, border-box;

    /* Animación del gradiente */
    animation: neon-move 6s linear infinite;
    background-size: 300% 300%;
  }

  /* Bordes por defecto */
  .neon-box {
    border-width: 1px;
  }

  /* Estilo para color estático */
  .neon-box.static-color {
    background-image: linear-gradient(#000000, #000000),
      linear-gradient(135deg, var(--neon-color), var(--neon-color));
    animation: none;
    background-size: auto;
  }

  .neon-content {
    position: relative;
    border-style: solid;
    border-color: transparent;
    border-width: 1px;
  }

  @keyframes neon-move {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  /* Estilos responsive para desktop */
  @media (min-width: 768px) {
    .neon-box {
      border-width: var(--desktop-border) !important;
    }
    .neon-content {
      border-width: var(--desktop-border) !important;
    }
  }
</style>
