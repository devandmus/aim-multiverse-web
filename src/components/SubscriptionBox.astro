---
import NeonBox from "./atoms/NeonBox.astro";
import NeonButton from "./atoms/NeonButton.astro";
import NeonLink from "./atoms/NeonLink.astro";

export interface Props {
  title?: string;
  subtitle?: string;
  color?: "pink" | "yellow" | "cyan" | "purple";
}

const {
  title = "Suscríbete para recibir los mejores artículos",
  subtitle = "(1-2/mes)",
  color = "pink",
} = Astro.props;
---

<div>
  <div class="p-6 sm:p-12 text-center">
    <h3 class="text-xl sm:text-2xl font-bold mb-4 text-base-light">
      {title}
    </h3>
    <p class="text-base-grey mb-6">{subtitle}</p>

    <form id="subscription-form" class="max-w-md mx-auto w-full px-4 sm:px-0">
      <!-- Email field - always visible -->
      <div class="mb-4">
        <input
          type="email"
          id="email"
          name="email"
          placeholder="tu@email.com"
          required
          class="w-full px-4 py-3 bg-base-dark border border-neon-purple rounded-lg text-base-light placeholder-base-grey focus:border-neon-purple focus:outline-none"
        />
      </div>

      <!-- Toggle button for additional fields -->
      <div class="flex justify-center my-6">
        <button
          type="button"
          id="toggle-fields-btn"
          class="group relative flex items-center gap-3 px-6 py-3 text-sm font-medium text-base-light bg-gradient-to-r from-neon-purple/10 to-neon-cyan/10 rounded-lg hover:cursor-pointer"
        >
          <div class="flex items-center gap-2">
            <div class="w-2 h-2 bg-neon-purple rounded-full animate-pulse">
            </div>
            <span class="tracking-wider">CAMPOS ADICIONALES</span>
          </div>
          <svg
            id="toggle-arrow"
            class="w-4 h-4 transition-transform duration-500 ease-in-out group-hover:scale-110"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M19 9l-7 7-7-7"></path>
          </svg>
          <!-- Glow effect -->
          <div
            class="absolute inset-0 rounded-lg bg-gradient-to-r from-neon-purple/20 to-neon-cyan/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-sm -z-10"
          >
          </div>
        </button>
      </div>

      <!-- Optional fields container with smooth growth animation -->
      <div
        id="optional-fields-container"
        class="overflow-hidden transition-all duration-500 ease-in-out"
      >
        <div
          id="optional-fields"
          class="space-y-4 mb-6 transform scale-y-0 origin-top transition-all duration-500 ease-in-out"
        >
          <div class="flex items-center gap-2 mb-4">
            <div class="w-1 h-1 bg-neon-cyan rounded-full"></div>
            <p class="text-sm text-base-grey">Opcionales:</p>
          </div>

          <div class="pb-4">
            <div class="flex flex-col sm:flex-row gap-4 pb-4">
              <input
                type="text"
                id="fname"
                name="fname"
                placeholder="Nombre"
                class="w-full sm:flex-1 px-4 py-3 bg-base-dark border border-neon-cyan/50 rounded-lg text-base-light placeholder-base-grey focus:border-neon-purple focus:outline-none transition-colors duration-200"
              />
              <input
                type="text"
                id="lname"
                name="lname"
                placeholder="Apellido"
                class="w-full sm:flex-1 px-4 py-3 bg-base-dark border border-neon-cyan/50 rounded-lg text-base-light placeholder-base-grey focus:border-neon-purple focus:outline-none transition-colors duration-200"
              />
            </div>

            <input
              type="tel"
              id="phone"
              name="phone"
              placeholder="Teléfono / WhatsApp"
              class="w-full px-4 py-3 bg-base-dark border border-neon-cyan/50 rounded-lg text-base-light placeholder-base-grey focus:border-neon-purple focus:outline-none transition-colors duration-200"
            />
          </div>
        </div>
      </div>

      <div class="flex flex-col sm:flex-row gap-4">
        <NeonLink
          type="submit"
          label="Suscribirse"
          color="purple"
          class="w-full"
        />
      </div>

      <!-- Status messages -->
      <div id="status-message" class="mt-4 hidden">
        <p id="status-text" class="text-sm"></p>
      </div>
    </form>
  </div>
</div>

<script>
  const API_ENDPOINT =
    "https://faas-nyc1-2ef2e6cc.doserverless.co/api/v1/web/fn-c2d034fb-2562-411a-bd05-4c1282a4a049/default/subscribe-worker";

  document.addEventListener("DOMContentLoaded", function () {
    const form = document.getElementById(
      "subscription-form",
    ) as HTMLFormElement;
    const emailInput = document.getElementById("email") as HTMLInputElement;
    const optionalFieldsContainer = document.getElementById(
      "optional-fields-container",
    ) as HTMLElement;
    const optionalFields = document.getElementById(
      "optional-fields",
    ) as HTMLElement;
    const toggleBtn = document.getElementById(
      "toggle-fields-btn",
    ) as HTMLButtonElement;
    const toggleArrow = document.getElementById("toggle-arrow") as HTMLElement;
    const statusMessage = document.getElementById(
      "status-message",
    ) as HTMLElement;
    const statusText = document.getElementById("status-text") as HTMLElement;

    let showOptionalFields = false;

    // Toggle optional fields with smooth growth animation
    toggleBtn.addEventListener("click", function () {
      if (!showOptionalFields) {
        // Show fields with growth animation
        showOptionalFields = true;
        optionalFieldsContainer.style.maxHeight = "0px";
        optionalFields.classList.remove("scale-y-0");
        optionalFields.classList.add("scale-y-100");

        // Calculate the height and animate
        setTimeout(() => {
          const height = optionalFields.scrollHeight;
          optionalFieldsContainer.style.maxHeight = height + "px";
        }, 10);

        // Rotate arrow
        toggleArrow.classList.add("rotate-180");
      } else {
        // Hide fields with shrink animation
        showOptionalFields = false;
        optionalFieldsContainer.style.maxHeight = "0px";
        optionalFields.classList.remove("scale-y-100");
        optionalFields.classList.add("scale-y-0");

        // Rotate arrow back
        toggleArrow.classList.remove("rotate-180");
      }
    });

    // Handle form submission
    form.addEventListener("submit", async function (e) {
      e.preventDefault();

      const submitButton = form.querySelector(
        'button[type="submit"]',
      ) as HTMLButtonElement;
      const originalText = submitButton.textContent;

      // Show loading state
      submitButton.textContent = "Enviando...";
      submitButton.disabled = true;

      try {
        // Prepare form data
        const formData = new FormData(form);
        const data: any = {
          email: formData.get("email"),
        };

        // Add optional fields only if they have values
        const fname = formData.get("fname") as string;
        const lname = formData.get("lname") as string;
        const phone = formData.get("phone") as string;

        if (fname && fname.trim()) data.fname = fname.trim();
        if (lname && lname.trim()) data.lname = lname.trim();
        if (phone && phone.trim()) data.phone = phone.trim();

        // Send to API
        const response = await fetch(API_ENDPOINT, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });

        if (response.ok) {
          showStatus("¡Gracias! Te has suscrito correctamente.", "success");
          form.reset();
          // Hide optional fields after successful submission
          showOptionalFields = false;
          optionalFieldsContainer.style.maxHeight = "0px";
          optionalFields.classList.remove("scale-y-100");
          optionalFields.classList.add("scale-y-0");
          toggleArrow.classList.remove("rotate-180");
        } else {
          const errorData = await response.json().catch(() => ({}));
          showStatus(
            "Error al suscribirse. Por favor, inténtalo de nuevo.",
            "error",
          );
        }
      } catch (error) {
        console.error("Subscription error:", error);
        showStatus(
          "Error de conexión. Por favor, inténtalo de nuevo.",
          "error",
        );
      } finally {
        // Restore button state
        submitButton.textContent = originalText;
        submitButton.disabled = false;
      }
    });

    function showStatus(message: string, type: "success" | "error") {
      statusText.textContent = message;
      statusText.className = `text-sm ${type === "success" ? "text-green-400" : "text-red-400"}`;
      statusMessage.classList.remove("hidden");

      // Auto-hide after 5 seconds
      setTimeout(() => {
        statusMessage.classList.add("hidden");
      }, 5000);
    }
  });
</script>

<style>
  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in {
    animation: fade-in 0.3s ease-out;
  }

  /* Smooth growth animation */
  #optional-fields-container {
    max-height: 0;
    transition: max-height 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Scale animation for content */
  #optional-fields {
    transform-origin: top;
    transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Futuristic button glow effect */
  #toggle-fields-btn::before {
    content: "";
    position: absolute;
    inset: -2px;
    background: linear-gradient(45deg, #8b5cf6, #06b6d4, #8b5cf6);
    border-radius: inherit;
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: -1;
    filter: blur(4px);
  }

  #toggle-fields-btn:hover::before {
    opacity: 0.3;
  }
</style>
