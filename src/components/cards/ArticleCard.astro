---
import NeonBox from "../atoms/NeonBox.astro";
import Gradients from "../skeleton/Gradients.astro";
import Tags from "../Tags.astro";

export interface Props {
  title: string;
  tags: string[];
  color: "pink" | "yellow" | "cyan" | "purple";
  readTime?: string;
  date?: string;
  description?: string;
  url: string;
  id: string;
  category?: string;
  class?: string;
  transitionName?: string;
  titleSize?: string;
}

const {
  title,
  tags,
  color,
  readTime,
  date,
  description,
  url,
  id,
  category = "",
  class: className = "",
  transitionName = "",
  titleSize = "text-xl md:text-2xl",
} = Astro.props;

const colorClasses = {
  pink: {
    border: "border-neon-pink",
    bg: "bg-neon-pink",
    shadow: "hover:shadow-neon-pink",
    hoverText: "group-hover:text-neon-pink",
  },
  yellow: {
    border: "border-neon-yellow",
    bg: "bg-neon-yellow",
    shadow: "hover:shadow-neon-yellow",
    hoverText: "group-hover:text-neon-yellow",
  },
  cyan: {
    border: "border-neon-cyan",
    bg: "bg-neon-cyan",
    shadow: "hover:shadow-neon-cyan",
    hoverText: "group-hover:text-neon-cyan",
  },
  purple: {
    border: "border-neon-purple",
    bg: "bg-neon-purple",
    shadow: "hover:shadow-neon-purple",
    hoverText: "group-hover:text-neon-purple",
  },
};

const currentColor = colorClasses[color];
---

<NeonBox
  color={color}
  transitionName={id ? `article-card-${id}` : ""}
  class={`rounded-xl ${className}`}
  ><a href={url}>
    <article
      class={`relative bg-base-dark rounded-xl overflow-hidden ${currentColor.shadow} h-full transition-all duration-300 group flex flex-col justify-between align-center`}
    >
      <Gradients />
      <div class="relative z-10 p-8">
        <div class="mb-4">
          <Tags
            tags={[category]}
            category={category}
            size="medium"
            style={id ? `view-transition-name: article-tags-${id}` : ""}
          />
        </div>
        <h2
          class={`${titleSize} font-bold mb-4 text-base-light ${currentColor.hoverText} transition-colors`}
          style={id ? `view-transition-name: article-title-${id}` : ""}
        >
          {title}
        </h2>
        {
          readTime && (
            <div class="flex items-center gap-2 mb-6">
              <svg
                class={`w-4 h-4 ${currentColor.hoverText.replace("group-hover:", "")}`}
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path
                  fill-rule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z"
                  clip-rule="evenodd"
                />
              </svg>
              <span class="text-sm text-base-grey">{readTime}</span>
            </div>
          )
        }
        <div class="flex justify-end">
          <div
            class={`w-8 h-8 ${currentColor.bg} rounded-full flex items-center justify-center group-hover:scale-110 transition-transform`}
          >
            <svg
              class={`w-4 h-4 text-base-dark`}
              fill="currentColor"
              viewBox="0 0 20 20"
            >
              <path
                fill-rule="evenodd"
                d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z"
                clip-rule="evenodd"></path>
            </svg>
          </div>
        </div>
      </div>
    </article>
  </a>
</NeonBox>
