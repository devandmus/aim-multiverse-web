---
// Componente de búsqueda con Fuse.js para el blog
---

<div class="search-container relative">
    <!-- Input de búsqueda -->
    <div class="relative">
        <input
            type="text"
            id="search-input"
            placeholder="Buscar artículos..."
            class="w-full px-4 py-3 pl-12 bg-base-dark border border-neon-cyan rounded-lg text-base-light placeholder-base-grey focus:border-neon-cyan focus:ring-2 focus:ring-neon-cyan/20 focus:outline-none transition-all duration-300"
        />
        <div class="absolute left-4 top-1/2 transform -translate-y-1/2">
            <svg
                class="w-5 h-5 text-neon-cyan"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
            >
                <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
        </div>
        <button
            id="clear-search"
            class="absolute right-4 top-1/2 transform -translate-y-1/2 text-base-grey hover:text-neon-pink transition-colors hidden"
        >
            <svg
                class="w-5 h-5"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
            >
                <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M6 18L18 6M6 6l12 12"></path>
            </svg>
        </button>
    </div>

    <!-- Filtros -->
    <div class="flex flex-wrap gap-2 mt-3 mb-4">
        <select
            id="category-filter"
            class="px-3 py-2 bg-base-dark border border-neon-cyan rounded-lg text-base-light text-sm focus:border-neon-cyan focus:outline-none"
        >
            <option value="">Todas las categorías</option>
            <option value="AI">AI</option>
            <option value="Dev">Desarrollo</option>
            <option value="Liderazgo">Liderazgo</option>
            <option value="Música">Música</option>
        </select>

        <select
            id="sort-filter"
            class="px-3 py-2 bg-base-dark border border-neon-cyan rounded-lg text-base-light text-sm focus:border-neon-cyan focus:outline-none"
        >
            <option value="relevance">Más relevante</option>
            <option value="date">Más reciente</option>
            <option value="reading">Tiempo de lectura</option>
        </select>
    </div>

    <!-- Resultados de búsqueda -->
    <div id="search-results" class="hidden">
        <div class="bg-base-darker border border-neon-cyan rounded-lg p-4 mb-4">
            <div class="flex items-center justify-between mb-3">
                <h3 class="text-lg font-semibold text-base-light">
                    Resultados de búsqueda
                </h3>
                <span id="results-count" class="text-sm text-base-grey"></span>
            </div>
            <div id="results-list" class="space-y-3">
                <!-- Los resultados se cargarán aquí dinámicamente -->
            </div>
            <div id="no-results" class="hidden text-center py-8">
                <svg
                    class="w-12 h-12 text-base-grey mx-auto mb-3"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.29-1.009-5.824-2.709M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                    ></path>
                </svg>
                <p class="text-base-grey">
                    No se encontraron artículos que coincidan con tu búsqueda.
                </p>
                <p class="text-sm text-base-grey mt-1">
                    Intenta con otros términos o revisa la ortografía.
                </p>
            </div>
        </div>
    </div>

    <!-- Loading spinner -->
    <div id="search-loading" class="hidden text-center py-8">
        <div
            class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-neon-cyan"
        >
        </div>
        <p class="text-base-grey mt-2">Buscando...</p>
    </div>
</div>

<script>
    import Fuse from "fuse.js";

    class BlogSearch {
        constructor() {
            this.searchInput = document.getElementById("search-input");
            this.clearButton = document.getElementById("clear-search");
            this.resultsContainer = document.getElementById("search-results");
            this.resultsList = document.getElementById("results-list");
            this.resultsCount = document.getElementById("results-count");
            this.noResults = document.getElementById("no-results");
            this.loading = document.getElementById("search-loading");
            this.categoryFilter = document.getElementById("category-filter");
            this.sortFilter = document.getElementById("sort-filter");

            this.searchIndex = [];
            this.fuse = null;
            this.debounceTimer = null;

            this.init();
        }

        async init() {
            await this.loadSearchIndex();
            this.setupEventListeners();
        }

        async loadSearchIndex() {
            try {
                // Cargar índice de búsqueda desde la API
                const response = await fetch("/api/search.json");
                const data = await response.json();

                if (data.success) {
                    this.searchIndex = data.results;
                    this.initFuse();
                } else {
                    console.error(
                        "Error cargando índice de búsqueda:",
                        data.error,
                    );
                }
            } catch (error) {
                console.error("Error cargando índice de búsqueda:", error);
            }
        }

        initFuse() {
            const options = {
                keys: [
                    { name: "title", weight: 0.4 },
                    { name: "description", weight: 0.3 },
                    { name: "tags", weight: 0.2 },
                    { name: "category", weight: 0.1 },
                ],
                threshold: 0.3,
                includeScore: true,
                includeMatches: true,
            };

            this.fuse = new Fuse(this.searchIndex, options);
        }

        setupEventListeners() {
            // Búsqueda con debounce
            this.searchInput.addEventListener("input", (e) => {
                clearTimeout(this.debounceTimer);
                this.debounceTimer = setTimeout(() => {
                    this.performSearch(e.target.value);
                }, 300);
            });

            // Botón limpiar
            this.clearButton.addEventListener("click", () => {
                this.searchInput.value = "";
                this.hideResults();
                this.clearButton.classList.add("hidden");
            });

            // Filtros
            this.categoryFilter.addEventListener("change", () => {
                this.performSearch(this.searchInput.value);
            });

            this.sortFilter.addEventListener("change", () => {
                this.performSearch(this.searchInput.value);
            });

            // Mostrar/ocultar botón limpiar
            this.searchInput.addEventListener("input", (e) => {
                if (e.target.value.length > 0) {
                    this.clearButton.classList.remove("hidden");
                } else {
                    this.clearButton.classList.add("hidden");
                }
            });
        }

        async performSearch(query) {
            if (!query || query.length < 2) {
                this.hideResults();
                return;
            }

            this.showLoading();

            try {
                // Buscar usando Fuse.js
                let results = [];

                if (this.fuse) {
                    const fuseResults = this.fuse.search(query);
                    results = fuseResults.map((result) => result.item);
                }

                // Aplicar filtros
                const category = this.categoryFilter.value;
                if (category) {
                    results = results.filter(
                        (post) => post.category === category,
                    );
                }

                // Aplicar ordenamiento
                const sortBy = this.sortFilter.value;
                switch (sortBy) {
                    case "date":
                        results.sort(
                            (a, b) => new Date(b.date) - new Date(a.date),
                        );
                        break;
                    case "reading":
                        results.sort((a, b) =>
                            (b.readingTime || "").localeCompare(
                                a.readingTime || "",
                            ),
                        );
                        break;
                    default:
                        // Mantener orden de relevancia de Fuse.js
                        break;
                }

                this.displayResults(results, query);
            } catch (error) {
                console.error("Error en búsqueda:", error);
                this.showError();
            }
        }

        displayResults(results, query) {
            this.hideLoading();

            if (results.length === 0) {
                this.showNoResults();
                return;
            }

            this.resultsCount.textContent = `${results.length} resultado${results.length !== 1 ? "s" : ""}`;

            this.resultsList.innerHTML = results
                .map((post) => this.createResultHTML(post, query))
                .join("");
            this.showResults();
        }

        createResultHTML(post, query) {
            const highlightText = (text, query) => {
                if (!query) return text;
                const regex = new RegExp(`(${query})`, "gi");
                return text.replace(
                    regex,
                    '<mark class="bg-neon-yellow text-base-dark px-1 rounded">$1</mark>',
                );
            };

            return `
        <div class="search-result-item bg-base-dark border border-neon-cyan/50 rounded-lg p-4 hover:border-neon-cyan transition-colors cursor-pointer" onclick="window.location.href='${post.url}'">
          <div class="flex items-start justify-between mb-2">
            <h4 class="text-base-light font-semibold hover:text-neon-pink transition-colors">
              ${highlightText(post.title, query)}
            </h4>
            <span class="text-xs text-base-grey whitespace-nowrap ml-2">
              ${post.readingTime || ""}
            </span>
          </div>
          
          <p class="text-base-grey text-sm mb-3 line-clamp-2">
            ${highlightText(post.description, query)}
          </p>
          
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-2">
              ${post.tags
                  .map(
                      (tag) => `
                <span class="px-2 py-1 bg-neon-cyan/20 text-neon-cyan text-xs rounded-full">
                  ${tag}
                </span>
              `,
                  )
                  .join("")}
              <span class="text-xs text-base-grey">
                ${post.category}
              </span>
            </div>
            <span class="text-xs text-base-grey">
              ${new Date(post.date).toLocaleDateString("es-ES", {
                  year: "numeric",
                  month: "short",
                  day: "numeric",
              })}
            </span>
          </div>
        </div>
      `;
        }

        showResults() {
            this.resultsContainer.classList.remove("hidden");
            this.noResults.classList.add("hidden");
        }

        hideResults() {
            this.resultsContainer.classList.add("hidden");
        }

        showLoading() {
            this.loading.classList.remove("hidden");
            this.resultsContainer.classList.add("hidden");
        }

        hideLoading() {
            this.loading.classList.add("hidden");
        }

        showNoResults() {
            this.resultsContainer.classList.remove("hidden");
            this.noResults.classList.remove("hidden");
            this.resultsList.innerHTML = "";
        }

        showError() {
            this.hideLoading();
            this.resultsContainer.classList.remove("hidden");
            this.noResults.classList.remove("hidden");
            this.noResults.innerHTML = `
        <svg class="w-12 h-12 text-red-400 mx-auto mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <p class="text-red-400">Error al realizar la búsqueda.</p>
        <p class="text-sm text-base-grey mt-1">Intenta nuevamente en unos momentos.</p>
      `;
        }
    }

    // Inicializar cuando el DOM esté listo
    document.addEventListener("DOMContentLoaded", () => {
        new BlogSearch();
    });
</script>

<style>
    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .search-result-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 255, 255, 0.1);
    }

    mark {
        background-color: var(--neon-yellow);
        color: var(--base-dark);
        padding: 0.125rem 0.25rem;
        border-radius: 0.25rem;
    }

    .animate-spin {
        animation: spin 1s linear infinite;
    }

    @keyframes spin {
        from {
            transform: rotate(0deg);
        }
        to {
            transform: rotate(360deg);
        }
    }
</style>
